<?xml version="1.0" encoding="UTF-8"?>

<beans  xmlns="http://www.springframework.org/schema/beans"    
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
	xmlns:p="http://www.springframework.org/schema/p"    
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    
	http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context-4.3.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd"
	default-lazy-init="false"
	>
	<!-- default-lazy-init延迟加载（也叫“懒加载”） -->
	
	<!-- 启动事务添加配置 -->
    <!-- component-scan扫包默认扫@Component、@ManagedBean、@Named注解的Bean，即使配置了context:include-filter也会扫这三个注解
    的bean，详见ClassPathScanningCandidateComponentProvider.registerDefaultFilters方法，所以不能使用context:include-filter来保证只扫某一
    类包，所以一般使用context:exclude-filter来排除不想扫的注解，或者使用use-default-filters=“false”直接排除默认的三个注解 -->
	<context:component-scan base-package="com.tch" use-default-filters="false">
	    <!-- 排除扫描service标签 -->
	    <!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
	    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 当配置了<mvc:annotation-driven/>后，会自动加载org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping和
org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter，所以如果显示的配置则需去掉配置<mvc:annotation-driven/> -->
    <!-- 这个是SpringMVC必须要配置的，因为它声明了@RequestMapping、@RequestBody、@ResponseBody等。
    并且，该配置默认加载很多的参数绑定方法，比如json转换解析器等。 -->
    <mvc:annotation-driven/>
	
	<!-- 配置读取外部配置文件，这里配置的properties可以注入@Controller -->
    <!-- <context:property-placeholder location="classpath:outprop1.properties,/WEB-INF/conf/outprop2.properties"/> -->
    
    <!-- <bean id="prop" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
                <array>
                    <value>classpath:outprop1.properties</value>
                    <value>/WEB-INF/conf/outprop2.properties</value>
                </array>
        </property>
    </bean> -->
    
    <bean id="prop" class="com.tch.config.MyPropertyPlaceholderConfigurer">
        <property name="locations">
                <array>
                    <value>classpath:outprop1.properties</value>
                    <value>/WEB-INF/conf/outprop2.properties</value>
                </array>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true" />
    </bean>
	
	<!--采用以下配置支持controller中返回String，否则会当成是视图名称和路劲处理-->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
	    <property name="messageConverters">
	        <list>
	            <!-- String结果数据支持，此解析器要放在JSON解析器前 -->
	            <ref bean="stringHttpMessageConverter"/>
	            <!-- JSON结果数据支持(使用fastjson) -->
	            <ref bean="fastJsonHttpMessageConverter"/>
	            <!-- JSON结果数据支持(使用jackson) -->
	            <!-- <ref bean="mappingJacksonHttpMessageConverter" /> -->
	        </list>
	    </property>
	</bean>
	<!-- String转化器 -->
	<bean id="stringHttpMessageConverter"
	      class="org.springframework.http.converter.StringHttpMessageConverter">
	    <property name="supportedMediaTypes">
	        <list>
	            <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
	            <value>text/html;charset=UTF-8</value>
	            <value>application/json;charset=UTF-8</value>
	        </list>
	    </property>
	</bean>
	<!-- JSON转化器(jackson版本) -->
	<bean id="mappingJacksonHttpMessageConverter"
	      class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	    <property name="objectMapper">
	        <!-- <bean class="com.threeStepTech.ObjectMapper.CustomObjectMapper"/> -->
	        <bean class="com.fasterxml.jackson.databind.ObjectMapper">
	            <property name="dateFormat">
	                <bean class="java.text.SimpleDateFormat">
	                    <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
	                </bean>
	            </property>
	            <property name="serializationInclusion">
	                <!-- 注入枚举类型,过滤对象，这样JSON中不会输出null -->
	                <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
	            </property>
	        </bean>
	    </property>
	    <property name="supportedMediaTypes">
	        <list>
	            <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
	            <value>text/html;charset=UTF-8</value>
	            <value>application/json;charset=UTF-8</value>
	        </list>
	    </property>
	</bean>
	<!-- JSON转化器(fastjson版本) -->
	<bean id="fastJsonHttpMessageConverter"
	      class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4">
	    <property name="supportedMediaTypes">
	        <list>
	            <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
	            <value>text/html;charset=UTF-8</value>
	            <value>application/json;charset=UTF-8</value>
	        </list>
	    </property>
	    <property name="fastJsonConfig">
	        <bean class="com.alibaba.fastjson.support.config.FastJsonConfig">
	            <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"/>
	            <property name="serializerFeatures">
	                <array>
	                    <!--此配置用于将Date类型转化为dateFormat对应的格式-->
	                    <value>WriteDateUseDateFormat</value>
	                </array>
	            </property>
	        </bean>
	    </property>
	</bean>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
    
</beans>